<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:jsp="http://java.sun.com/xml/ns/javaee/jsp"
	xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0" metadata-complete="false">
	
	<display-name>Spring Learning Web Application</display-name>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

<!-- 　SpringMVC如果过滤器过滤范围配置了/或者/*，那么框架会过滤所有请求，包括自己写的请求和静态资源请求，
这样静态资源就不能正常加载，包括js文件、css文件、图片资源访问的时候都会出现404页面，下面就来配置不过滤静态资源的方法:

　　第一种方法是最原生的，因为开始Spring核心过滤器过滤的路径是项目下所有路径，这个时候要改成过滤指定后缀即可，
比如*.do，*.html等后缀，这样自己编写controller的时候全部主动设置请求为特定后缀，这样静态资源和编写的请求就可以区分开了

　　第二种方法是如果我们打算编写没有后缀的请求，比如/hello这种，上面方法是有限制的，所以这个时候SpringMVC还是过
滤/*这样的全部请求，我们在web.xml中配置静态资源优先过滤，这个时候服务器首先加载web.xml提前拦截静态资源请求，然
后SpringMVC过滤器就拦截不到这些请求了，所以tomcat就可以正常使用静态资源了，在web.xml中添加如下配置，前后均可： 

   <servlet-mapping>
       <servlet-name>default</servlet-name>
       <url-pattern>*.jpg</url-pattern>
   </servlet-mapping>
   <servlet-mapping>
       <servlet-name>default</servlet-name>
     <url-pattern>*.js</url-pattern>
   </servlet-mapping>
   <servlet-mapping>
     <servlet-name>default</servlet-name>
     <url-pattern>*.css</url-pattern>
</servlet-mapping>

　　如果有更多的资源需要过滤，比如.png，.gif等等，都可以继续添加配置，也比较方便
Ref: http://www.cnblogs.com/freeweb/p/5175188.html -->
	<servlet>
		<servlet-name>springMVCServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:spring/applicationContext.xml,classpath*:spring/mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springMVCServlet</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>


	<session-config>
		<session-timeout>18000</session-timeout>
	</session-config>
	
</web-app>
